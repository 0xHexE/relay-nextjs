(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{75:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return d})),t.d(n,"toc",(function(){return u})),t.d(n,"default",(function(){return c}));var a=t(3),r=t(7),s=(t(0),t(90)),o={title:"Lazy-loaded Queries"},d={unversionedId:"lazy-loaded-query",id:"lazy-loaded-query",isDocsHomePage:!1,title:"Lazy-loaded Queries",description:"Relay's useLazyLoadQuery API let us",source:"@site/docs/lazy-loaded-query.md",slug:"/lazy-loaded-query",permalink:"/relay-nextjs/docs/lazy-loaded-query",editUrl:"https://github.com/RevereCRE/relay-nextjs/edit/master/website/docs/lazy-loaded-query.md",version:"current",sidebar:"docs",previous:{title:"Configuring relay-nextjs",permalink:"/relay-nextjs/docs/configuration"}},u=[],i={toc:u};function c(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},i,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Relay's ",Object(s.b)("a",{parentName:"p",href:"https://relay.dev/docs/api-reference/use-lazy-load-query/"},Object(s.b)("inlineCode",{parentName:"a"},"useLazyLoadQuery")," API")," let us\ndefer loading queries until a component is mounted. To render a loading state while the query is\npending the docs recommended adding a ",Object(s.b)("inlineCode",{parentName:"p"},"<Suspense>")," boundary. Next.js and ",Object(s.b)("inlineCode",{parentName:"p"},"relay-nextjs")," both expect\nto be able to render on the server and as of the time of writing React Suspense does not support\nserver rendering. When using ",Object(s.b)("inlineCode",{parentName:"p"},"withRelay")," and ",Object(s.b)("inlineCode",{parentName:"p"},"usePreloadedQuery")," we take care of adding the ",Object(s.b)("inlineCode",{parentName:"p"},"<Suspense>"),"\nboundary for you but we cannot here."),Object(s.b)("p",null,"To use ",Object(s.b)("inlineCode",{parentName:"p"},"useLazyLoadQuery")," and render a ",Object(s.b)("inlineCode",{parentName:"p"},"<Suspense>")," boundary you must create a dynamically rendered\ncomponent that skips SSR. For example:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-tsx"},"// src/components/user_stats.tsx\nimport type { userStats_Birthday } from 'queries/__generated__/userStats_Birthday.graphql';\nimport React, { Suspense, useCallback } from 'react';\nimport { graphql, useLazyLoadQuery } from 'react-relay';\n\nfunction UserBirthday({ uuid }: { uuid: string }) {\n  const query = useLazyLoadQuery<userStats_Birthday>(\n    graphql`\n      query userStats_Birthday($uuid: ID!) {\n        user(id: $uuid) {\n          birthday\n        }\n      }\n    `,\n    { uuid }\n  );\n\n  return <div>Birthday is {query.user.birthday}!</div>;\n}\n\nfunction UserStats({ uuid }: { uuid: string }) {\n  return (\n    <Suspense fallback=\"Loading...\">\n      <UserBirthday uuid={uuid} />\n    </Suspense>\n  );\n}\n\nexport default UserStats;\n")),Object(s.b)("p",null,"Note that we have two components here: one that has a ",Object(s.b)("inlineCode",{parentName:"p"},"<Suspense>")," boundary and one that actually\ncalls ",Object(s.b)("inlineCode",{parentName:"p"},"useLazyLoadQuery"),". If these two were merged into the same component there would be no boundary\nto catch ",Object(s.b)("inlineCode",{parentName:"p"},"useLazyLoadQuery")," suspending!"),Object(s.b)("p",null,"To render this component use the ",Object(s.b)("a",{parentName:"p",href:"https://nextjs.org/docs/advanced-features/dynamic-import"},"Next.js ",Object(s.b)("inlineCode",{parentName:"a"},"dynamic")," API"),":"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-tsx"},"// src/pages/user_profile.tsx\nimport dynamic from 'next/dynamic';\n\nconst UserStats = dynamic(() => import('components/components/user_stats'), {\n  ssr: false,\n});\n\nfunction UserProfile({ uuid }: { uuid: string }) {\n  return (\n    <div>\n      {/* ... */}\n      <UserStats uuid={uuid} />\n    </div>\n  );\n}\n")))}c.isMDXComponent=!0}}]);